import os
import telebot
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
load_dotenv()
TOKEN = os.getenv('TOKEN')
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
ADMIN_ID = int(os.getenv('ADMIN_ID'))

bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def load_workouts():
    workouts = {}
    current_program = ""
    with open('workouts.txt', 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line.startswith('[') and line.endswith(']'):
                current_program = line[1:-1]
                workouts[current_program] = []
            elif current_program and line:
                workouts[current_program].append(line)
    return workouts

workouts = load_workouts()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def check_sub(user_id):
    try:
        status = bot.get_chat_member(CHANNEL_ID, user_id).status
        return status in ["member", "administrator", "creator"]
    except:
        return False

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    if check_sub(message.from_user.id):
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for program in workouts.keys():
            keyboard.add(program)
        bot.send_message(message.chat.id, "üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "‚õî –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [–ü—É—Ç—å –•–∞–Ω–º—ã](https://t.me/hannasfollower)", parse_mode="Markdown")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@bot.message_handler(func=lambda message: message.text in workouts.keys())
def send_program(message):
    if not check_sub(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª!")
        return
        
    program = message.text
    response = "\n".join(workouts[program])
    bot.send_message(message.chat.id, f"<b>{program}</b>\n{response}", parse_mode="HTML")

# –ë–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda message: True)
def block_other(message):
    bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ‚¨áÔ∏è")

# –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
print("‚öîÔ∏è –ë–æ—Ç '–ü—É—Ç—å –•–∞–Ω–º—ã' –∑–∞–ø—É—â–µ–Ω!")
while True:
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
        time.sleep(60)
